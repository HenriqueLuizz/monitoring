# Telegraf Configuration

# Global tags can be specified here in key="value" format.
[global_tags]

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "30s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "40s"
  flush_jitter = "0s"
  ## Valid values are "ns", "us" (or "µs"), "ms", "s".
  precision = ""
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for influxdb server to send metrics to

 [[outputs.influxdb_v2]]
  ## URL onde está o influxdb.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  ##       urls = ["http://127.0.0.1:8086"] 
  urls = ["https://IP_DO_INFLUXDB:8086"]

  ## API token para autenticação.
  token = "${INFLUX_TOKEN}"
  #token = "SEU_TOKEN"

  ## Nome da organizaçao onde será escrito os dados.
  organization = "SUA_ORGANIZACAO"

  ## Bucket de destino onde será gravado os dados.
  bucket = "SUA_BUCKET"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## Comment this line if you want the raw CPU time metrics
  # fielddrop = ["time_*"]
  fielddrop = ["time_*","usage_*"]
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  
  report_active = false

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration  

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration
  
# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
#[[inputs.processes]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

# Collect TCP connections state and UDP socket counts
[[inputs.netstat]]
  # no configuration

# Gather metrics about network interfaces
[[inputs.net]]

[[inputs.win_perf_counters]]
  [[inputs.win_perf_counters.object]]
    # Processor usage, alternative to native, reports on a per core.
    ObjectName = "Processor"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Interrupt Time",
      "% Privileged Time",
      "% User Time",
      "% DPC Time",
	  "% Processor Time"
    ]#
      
    Measurement = "win_cpu"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

	[[inputs.win_perf_counters.object]]
		# Processor usage, alternative to native, reports on a per core.
		ObjectName = "Process"
		Instances = ["*"]
		Counters = ["Elapsed Time","% Processor Time"]
		Measurement = "win_services"

  [[inputs.win_perf_counters.object]]
    # Disk times and queues
    ObjectName = "LogicalDisk"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
      "% Free Space",
      "Current Disk Queue Length",
      "Free Megabytes",
    ]
    Measurement = "win_disk"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    ObjectName = "PhysicalDisk"
    Instances = ["*"]
    Counters = [
      "Disk Read Bytes/sec",
      "Disk Write Bytes/sec",
      "Current Disk Queue Length",
      "Disk Reads/sec",
      "Disk Writes/sec",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
	  "Avg. Disk sec/Read",
	  "Avg. Disk sec/Write"
    ]
    Measurement = "win_diskio"

  [[inputs.win_perf_counters.object]]
    # more counters for the Network Interface Object can be found at
    # https://msdn.microsoft.com/en-us/library/ms803962.aspx
    ObjectName = "Network Interface"
    Counters = [
	    "Current Bandwidth",
      "Bytes Received/sec",
      "Bytes Sent/sec",
      "Packets Received/sec",
      "Packets Sent/sec",
      "Output Queue Length",
      "Packets Outbound Discarded",
      "Packets Outbound Errors",
      "Packets Received Discarded",
      "Packets Received Errors",
      "Packets Received Unknown"
    ]
    Instances = ["*"] # Use 6 x - to remove the Instance bit from the query.
    Measurement = "win_net"
    #IncludeTotal=false 
  	#Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    ObjectName = "System"
    Counters = [
      "Context Switches/sec",
      "System Calls/sec",
      "Processor Queue Length",
      "Threads",
      "System Up Time",
      "Processes"
    ]
    Instances = ["*"]
    Measurement = "win_system"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Memory object.
    ObjectName = "Memory"
    Counters = [
      "Available Bytes",
      "Cache Faults/sec",
      "Demand Zero Faults/sec",
      "Page Faults/sec",
      "Pages/sec",
      "Transition Faults/sec",
      "Pool Nonpaged Bytes",
      "Pool Paged Bytes",
      "Standby Cache Reserve Bytes",
      "Standby Cache Normal Priority Bytes",
      "Standby Cache Core Bytes",
    ]
    # Use 6 x - to remove the Instance bit from the query.
    Instances = ["*"]
    Measurement = "win_mem"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Paging File object.
    ObjectName = "Paging File"
    Counters = [
      "% Usage",
    ]
    Instances = ["_Total"]
    Measurement = "win_swap"

[[inputs.win_perf_counters.object]]
    # Process metrics       #
    ObjectName = "Process"
    Counters = [
	  "% Processor Time",
      "Handle Count",
      "Private Bytes",
      "Thread Count",
      "Virtual Bytes",
      "Working Set"
	  ]
    Instances = ["*"]
    Measurement = "win_proc"
    #IncludeTotal=false 
	#Set to true to include _Total instance when querying for all (*).
	
# Windows system plugins using WMI (disabled by default, using
# win_perf_counters over WMI is recommended)

# # Read metrics about cpu usage
[[inputs.cpu]]
#   ## Whether to report per-cpu stats or not
   percpu = true
#   ## Whether to report total system cpu stats or not
   totalcpu = true
#   ## If true, collect raw CPU time metrics.
   collect_cpu_time = false
#   ## If true, compute and report the sum of all non-idle CPU states.
#   report_active = false


# # Read metrics about disk usage by mount point
[[inputs.disk]]

# # Read metrics about disk IO by device
[[inputs.diskio]]

# # Read metrics about memory usage
[[inputs.mem]]
#   # no configuration

# # Read metrics about swap memory usage
[[inputs.swap]]
#   # no configuration

#[[inputs.sqlserver]]
  ## Specify instances to monitor with a list of connection strings.
  ## All connection parameters are optional.
  ## By default, the host is localhost, listening on default port, TCP 1433.
  ##   for Windows, the user is the currently running AD user (SSO).
  ##   See https://github.com/denisenkom/go-mssqldb for detailed connection
  ##   parameters, in particular, tls connections can be created like so:
  ##   "encrypt=true;certificate=<cert>;hostNameInCertificate=<SqlServer host fqdn>"
  
  #   servers = [
  #    "Server=IP_DA_INSTANCIA;Port=1433;User Id=USUARIO;Password=SENHA;app name=BANCO_DE_DADOS;log=2;",
  #   ]

  ## Optional parameter, setting this to 2 will use a new version
  ## of the collection queries that break compatibility with the original
  ## dashboards. All new functionality is under V2
  
  #query_version = 1

  ## If you are using AzureDB, setting this to true will gather resource utilization metrics
  ## azuredb = true
  
  # database_type = 'SQLServer'
  
  # include_query = [
  #  'SQLServerPerformanceCounters',
  #  'SQLServerWaitStatsCategorized',
  #  'SQLServerDatabaseIO',
  #  'SQLServerProperties',
  #  'SQLServerMemoryClerks',
  #  'SQLServerSchedulers',
  #  'SQLServerRequests',
  #  'SQLServerVolumeSpace',
  #  'SQLServerCpu'
  #  ]
  
  ## Possible queries:
  ## - PerformanceCounters
  ## - WaitStatsCategorized
  ## - DatabaseIO
  ## - DatabaseProperties
  ## - CPUHistory
  ## - DatabaseSize
  ## - DatabaseStats
  ## - MemoryClerk
  ## - VolumeSpace
  ## - Schedulers
  ## - AzureDBResourceStats
  ## - AzureDBResourceGovernance
  ## - SqlRequests
  ## - ServerProperties
  ## A list of queries to include. If not specified, all the above listed queries are used.
  #   include_query = []

  ## A list of queries to explicitly ignore.
  # exclude_query = [ ]

[[inputs.filecount]]
  ## Directory to gather stats about.
  ##   deprecated in 1.9; use the directories option
  # directory = "/var/cache/apt/archives"

  ## Directories to gather stats about.
  ## This accept standard unit glob matching rules, but with the addition of
  ## ** as a "super asterisk". ie:
  ##   /var/log/**    -> recursively find all directories in /var/log and count files in each directories
  ##   /var/log/*/*   -> find all directories with a parent dir in /var/log and count files in each directories
  ##   /var/log       -> count all files in /var/log and all of its subdirectories
  # directories = ["H:/totvs/microsiga/Protheus_Data/system"]

  ## Only count files that match the name pattern. Defaults to "*".
  name = "*"

  ## Count files in subdirectories. Defaults to true.
  recursive = true

  ## Only count regular files. Defaults to true.
  regular_only = true

  ## Follow all symlinks while walking the directory tree. Defaults to false.
  follow_symlinks = false

  ## Only count files that are at least this size. If size is
  ## a negative number, only count files that are smaller than the
  ## absolute value of size. Acceptable units are B, KiB, MiB, KB, ...
  ## Without quotes and units, interpreted as size in bytes.
  size = "0B"

  ## Only count files that have not been touched for at least this
  ## duration. If mtime is negative, only count files that have been
  ## touched in this duration. Defaults to "0s".
  mtime = "0s"

# .\telegraf.exe --service install --config "C:\Program Files\Telegraf\telegraf-1.20.4\telegraf.conf"
# .\telegraf.exe" --config "C:\Program Files\Telegraf\telegraf-1.20.4\telegraf.conf" --service-name telegraf
